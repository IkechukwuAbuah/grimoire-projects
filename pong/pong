<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Pong Game</title>
	<style>
		body {
			margin: 0;
			display: flex;
			justify-content: center;
			align-items: center;
			height: 100vh;
			background-color: #000;
		}

		canvas {
			border: 1px solid #fff;
		}
	</style>
</head>

<body>
	<canvas id="pongCanvas" width="800" height="400"></canvas>
	<script>
		const canvas = document.getElementById('pongCanvas');
		const ctx = canvas.getContext('2d');

		// Define the paddles and ball...
		// (Your existing code for paddles, ball, and functions)
		// Define the paddles and ball
		const userPaddle = {
			x: 0,
			y: canvas.height / 2 - 50,
			width: 10,
			height: 100,
			color: '#FFCD05',
			score: 0
		};

		const aiPaddle = {
			x: canvas.width - 10,
			y: canvas.height / 2 - 50,
			width: 10,
			height: 100,
			color: '#FF5733',
			score: 0
		};

		const ball = {
			x: canvas.width / 2,
			y: canvas.height / 2,
			radius: 10,
			velocityX: 5,
			velocityY: 5,
			speed: 7,
			color: '#05EDFF'
		};

		const winningScore = 5;
		let gameOver = false;

		// Draw functions
		function drawRect(x, y, w, h, color) {
			ctx.fillStyle = color;
			ctx.fillRect(x, y, w, h);
		}

		function drawArc(x, y, r, color) {
			ctx.fillStyle = color;
			ctx.beginPath();
			ctx.arc(x, y, r, 0, Math.PI * 2, true);
			ctx.closePath();
			ctx.fill();
		}

		function drawScore(x, y, score) {
			ctx.fillStyle = '#fff';
			ctx.font = '35px Arial';
			ctx.fillText(score, x, y);
		}

		// Collision detection
		function collision(b, p) {
			b.top = b.y - b.radius;
			b.bottom = b.y + b.radius;
			b.left = b.x - b.radius;
			b.right = b.x + b.radius;

			p.top = p.y;
			p.bottom = p.y + p.height;
			p.left = p.x;
			p.right = p.x + p.width;

			return b.right > p.left && b.top < p.bottom && b.left < p.right && b.bottom > p.top;
		}

		// Ball update
		function updateBall() {
			ball.x += ball.velocityX;
			ball.y += ball.velocityY;

			// Wall collision (top and bottom)
			if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
				ball.velocityY = -ball.velocityY;
			}

			// Paddle collision
			let player = (ball.x < canvas.width / 2) ? userPaddle : aiPaddle;
			if (collision(ball, player)) {
				// Handle collision with paddle
				let collidePoint = ball.y - (player.y + player.height / 2);
				collidePoint = collidePoint / (player.height / 2);

				let angle = collidePoint * Math.PI / 4;
				let direction = (ball.x < canvas.width / 2) ? 1 : -1;
				ball.velocityX = direction * ball.speed * Math.cos(angle);
				ball.velocityY = ball.speed * Math.sin(angle);

				ball.speed += 0.1;
			}

			// Score Update
			if (ball.x - ball.radius < 0) {
				aiPaddle.score++;
				resetBall();
			} else if (ball.x + ball.radius > canvas.width) {
				userPaddle.score++;
				resetBall();
			}
		}

		// Basic AI Logic
		function aiMovement() {
			let middlePaddle = aiPaddle.y + aiPaddle.height / 2;
			if (middlePaddle < ball.y) {
				aiPaddle.y += 4;
			} else {
				aiPaddle.y -= 4;
			}
		}

		// Advanced AI Movement
		function advancedAiMovement() {
			let predictedY = predictBallPosition();
			let middlePaddle = aiPaddle.y + aiPaddle.height / 2;
			let aiSpeed = 3; // Adjust for difficulty

			if (middlePaddle < predictedY) {
				aiPaddle.y += Math.min(aiSpeed, Math.abs(predictedY - middlePaddle));
			} else {
				aiPaddle.y -= Math.min(aiSpeed, Math.abs(predictedY - middlePaddle));
			}
		}

		function predictBallPosition() {
			// Clone the ball's current state
			let ballCopy = {...ball};

			// Predict the ball's future position
			while (ballCopy.x + ballCopy.radius < canvas.width) {
				ballCopy.x += ballCopy.velocityX;
				ballCopy.y += ballCopy.velocityY;

				// Reflect off the top and bottom walls
				if (ballCopy.y - ballCopy.radius < 0 || ballCopy.y + ballCopy.radius > canvas.height) {
					ballCopy.velocityY = -ballCopy.velocityY;
				}
			}

			// Return the predicted y-coordinate of the ball
			return ballCopy.y;
		}


		// Reset Ball
		function resetBall() {
			ball.x = canvas.width / 2;
			ball.y = canvas.height / 2;
			ball.velocityX = -ball.velocityX;
			ball.speed = 7;
		}

		// Check for Winner
		function checkForWinner() {
			if (userPaddle.score >= winningScore || aiPaddle.score >= winningScore) {
				gameOver = true;
				let winner = userPaddle.score >= winningScore ? 'Player' : 'AI';
				ctx.fillStyle = '#fff';
				ctx.font = '40px Arial';
				ctx.fillText(winner + ' Wins!', canvas.width / 4, canvas.height / 2);
				ctx.font = '20px Arial';
				ctx.fillText('Press R to Restart', canvas.width / 4, canvas.height / 2 + 30);
			}
		}

		// Restart Game
		// Restart Game
		function restartGame() {
			userPaddle.score = 0;
			aiPaddle.score = 0;
			gameOver = false;
			resetBall();
		}

		let gameStarted = false;

		function showStartScreen() {
			ctx.fillStyle = '#fff';
			ctx.font = '40px Arial';
			ctx.fillText('Press Enter to Start', canvas.width / 4, canvas.height / 2);
		}

		document.addEventListener('keydown', (event) => {
			if (event.key === 'Enter' && !gameStarted) {
				gameStarted = true;
				resetBall();
			} else if (event.key === 'w') {
				userPaddle.y -= 20;
			} else if (event.key === 's') {
				userPaddle.y += 20;
			} else if (event.key === 'r' && gameOver) {
				restartGame();
			}
		});
		function gameLoop() {
			if (!gameStarted) {
				showStartScreen();
			} else {
				drawRect(0, 0, canvas.width, canvas.height, '#000');
				drawRect(userPaddle.x, userPaddle.y, userPaddle.width, userPaddle.height, userPaddle.color);
				drawRect(aiPaddle.x, aiPaddle.y, aiPaddle.width, aiPaddle.height, aiPaddle.color);
				drawArc(ball.x, ball.y, ball.radius, ball.color);
				drawScore(canvas.width / 4, canvas.height / 6, userPaddle.score);
				drawScore(3 * canvas.width / 4, canvas.height / 6, aiPaddle.score);

				if (!gameOver) {
					updateBall();
					aiMovement();
					advancedAiMovement(); // Uncomment for advanced AI
				} else {
					checkForWinner();
				}
			}
			requestAnimationFrame(gameLoop);
		}

		gameLoop();
	</script>
</body>

</html>